import java.awt.*;
import javax.swing.*;
import javax.sound.midi.*;
import java.util.*;
import java.awt.event.*;

public class BeatBox {

    ArrayList <JCheckBox> checkboxList;
    Sequencer player;
    Sequence sequence;
    Track track;
    JFrame frame;
    JPanel panel;

    String [] instrumentNames = {"Bass Drum", "Closed", "Open HiHat", "Acoustic Snare",
            "Crash Cymbal", "Hand Clap", "Hight Tom", "Hi Bongo", "Maracas", "Whistle", "Low Conga",
            "Cowbell", "Vibraslap", "Lowmid Tom", "High Agogo", "Open Hi Conga"};

    int [] instruments = {35, 42, 46, 38, 49, 39, 50, 60, 70, 72, 64, 56, 58, 47, 67, 63};

    public static void main(String [] args) {

        BeatBox bb = new BeatBox();

        bb.setLook();
        bb.buildGUI(); 

    }

    public void setLook() { //off

        try { UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName()); } 
        catch (Exception e) {}
        
    } //on

    public void buildGUI() {

        frame = new JFrame("Beatbox");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        BorderLayout layout = new BorderLayout();
        JPanel background = new JPanel(layout);
        background.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        checkboxList = new ArrayList <JCheckBox>();
        Box buttonBox = new Box(BoxLayout.Y_AXIS);

        JButton start = new JButton("Start");
        start.addActionListener(new MyStartListener());
        buttonBox.add(start);

        JButton stop = new JButton("Stop");
        stop.addActionListener(new MyStopListener());
        buttonBox.add(stop);

        JButton upTempo = new JButton("Tempo Up");
        upTempo.addActionListener(new MyUpTempoListener());
        buttonBox.add(upTempo);

        JButton downTempo = new JButton("Tempo Down");
        downTempo.addActionListener(new MyDownTempoListener());
        buttonBox.add(downTempo);

        Box nameBox = new Box(BoxLayout.Y_AXIS);

        for (int i = 0; i < 16; i++) {

            nameBox.add(new Label(instrumentNames [i]));

        }

        background.add(BorderLayout.EAST, buttonBox);
        background.add(BorderLayout.WEST, nameBox);

        frame.getContentPane().add(background);

        GridLayout grid = new GridLayout(16, 16);
        grid.setVgap(1);
        grid.setHgap(2);
        panel = new JPanel(grid);
        background.add(BorderLayout.CENTER, panel);

        for (int i = 0; i < 256; i++) {

            JCheckBox c = new JCheckBox();
            c.setSelected(false);
            checkboxList.add(c);
            panel.add(c);

        }

        setUpMidi();

        frame.setBounds(50, 50, 300, 300);
        frame.pack();
        frame.setVisible(true);

    }

    public void setUpMidi() {

        try {

            player = MidiSystem.getSequencer();
            player.open();
            sequence = new Sequence(Sequence.PPQ, 4);
            track = sequence.createTrack();
            player.setTempoInBPM(120);

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public void buildTrackAndStart() {

        int [] trackList = null;

        sequence.deleteTrack(track);
        track = sequence.createTrack();

        for (int i = 0; i < 16; i++) {

            trackList = new int[16];
            int key = instruments [i];

            for (int j = 0; j < 16; j++) {

                JCheckBox jc = (JCheckBox) checkboxList.get(j + (16 * i)); //off
                
                if (jc.isSelected()) { trackList [j] = key; } else { trackList [j] = 0; } //on

            }

            makeTracks(trackList);
            track.add(makeEvent(176, 1, 127, 0, 16));

        }

        track.add(makeEvent(192, 9, 1, 0, 15));

        try {

            player.setSequence(sequence);
            player.setLoopCount(player.LOOP_CONTINUOUSLY);
            player.start();
            player.setTempoInBPM(120); //off

        } catch (Exception e) { e.printStackTrace(); } //on

    }

    public class MyStartListener implements ActionListener {

        public void actionPerformed(ActionEvent a) {

            buildTrackAndStart();

        }

    }

    public class MyStopListener implements ActionListener {

        public void actionPerformed(ActionEvent a) {

            player.stop();

        }

    }

    public class MyUpTempoListener implements ActionListener {

        public void actionPerformed(ActionEvent a) {

            float tempoFactor = player.getTempoFactor();
            player.setTempoFactor((float) (tempoFactor * 1.03));

        }
    }

    public class MyDownTempoListener implements ActionListener {

        public void actionPerformed(ActionEvent a) {

            float tempoFactor = player.getTempoFactor();
            player.setTempoFactor((float) (tempoFactor * .97));

        }
    }

    public void makeTracks(int [] list) {

        for (int i = 0; i < 16; i++) {

            int key = list [i];

            if (key != 0) {

                track.add(makeEvent(144, 9, key, 100, i));
                track.add(makeEvent(128, 9, key, 100, i + 1));;

            }

        }

    }

    public MidiEvent makeEvent(int comd, int chan, int one, int two, int tick) {

        MidiEvent event = null;

        try {

            ShortMessage a = new ShortMessage();
            a.setMessage(comd, chan, one, two);
            event = new MidiEvent(a, tick);

        } catch (Exception e) {

            e.printStackTrace();

        }

        return event;

    }


}

